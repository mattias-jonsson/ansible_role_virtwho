---

- name: Create log directory for virt-who service.
  become: true
  ansible.builtin.file:
    path: /var/log/virt-who
    state: directory
    owner: root
    group: root
    mode: "0700"

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Set fact for installed Virt-Who version
  ansible.builtin.set_fact:
    installed_virtwho_version: "{{ ansible_facts.packages['virt-who']| map(attribute='version') | list | join('\n') }}"

- name: Encrypt password for each hypervisor and register to variable.
  become: true
  ansible.builtin.shell: "{{ ansible_role_virtwho_passwdbin }} -p '{{ item.password }}' 2> /dev/null"
  register: encrypted_passwords
  failed_when: false
  changed_when: false
  with_items:
    - "{{ ansible_role_virtwho_hypervisor_config }}"
  no_log: true

- name: Set fact for each encrypted password.
  become: true
  ansible.builtin.set_fact: {"{{ item.item.name }}_encryptedpassword": "{{ item.stdout }}"}
  with_items:
    - "{{ encrypted_passwords.results }}"
  no_log: true

- name: Create sysconfig configuration from template.
  become: true
  ansible.builtin.template:
    src: virt-whosysconfig.j2
    dest: /etc/sysconfig/virt-who
    owner: root
    group: root
    mode: "0600"
    backup: false
  notify: Restart virt-who

- name: Create global configuration from template.
  become: true
  ansible.builtin.template:
    src: virt-whoglobal.conf.j2
    dest: /etc/virt-who.conf
    owner: root
    group: root
    mode: "0600"
    backup: false
  notify: Restart virt-who

- name: Create unique config for each hypervisor.
  become: true
  ansible.builtin.template:
    src: virt-who.conf.j2
    dest: /etc/virt-who.d/{{ item.name }}.conf
    owner: root
    group: root
    mode: "0600"
    backup: false
  with_items:
    - "{{ ansible_role_virtwho_hypervisor_config }}"
  no_log: true
  notify: Restart virt-who

- name: Check that service is enabled and started.
  become: true
  ansible.builtin.service:
    name: virt-who
    state: started
    enabled: true
